#!/bin/bash

BF_COL1=2
BF_COL2=7
BF_COL3=6
info_length=19

userName="${USER:-$(id -un)}"
hostName="${HOSTNAME:-${hostname:-$(cat /etc/hostname)}}"
architecture="$HOSTTYPE"


log(){
    # Do nothig if info field is empty.
    [ "$2" ] || return

    # Store the value of '$1' as we reset the argument list below.
    name=$1
    
    # Use 'set --' as a means of stripping all leading and trailing
    # white-space from the info string. This also normalizes all
    # white-space inside of the string.
    #
    # Disable the shellcheck warning for word-splitting
    # as it's safe and intended ('set -f' disables globbing).
    {
        set -f
        set +f -- $2
        info=$*
    }

    # Move the courcer toward right to print name and info right
    # of the ascii with an aditional gap using BF_GAP = variable. 
    # printf '[%sC' "$(( $ascii_width + ${BF_GAP:-4}))"

    # Print the info name with color
    printf '[3%s;1m%s[m' "${BF_COL1:-2}" "$name"

    # Move courcer backword at starting of info name and then move
    # it forward ( max-info-name + extra gap ) to alogn all information.
    printf '[%sD[%sC' "${#name}" "${PF_INFOALIGN:-$(($info_length + 1))}"

    # Print the information striping all the extra spaces.
    printf '[3%sm%s[m\n' "${BF_COL2:-7}" "$info"

    # Incriment whenever log is called to keep track of lenfo info_height 
    # so that correctely align the the prompet. 
    info_height=$((${info_height:-0} + 1))
}


convert_uptime(){
  local rawSec secsUp

  read rawSec _ </proc/uptime
  secsUp="${rawSec%.*}"

  ((daysUp=secsUp/86400))
  ((hoursUp=secsUp%86400/3600))
  ((minsUp=secsUp%3600/60))
}

processor(){
  local line freqDir

  while read line; do
    [[ $line =~ ^'model name' ]]&&{ processor="${line#*: }"; break; }
  done </proc/cpuinfo

  freqDir='/sys/devices/system/cpu/cpu0/cpufreq'
  
  read maxFreq <"$freqDir"/scaling_max_freq
  maxFreq="${maxFreq::2}"; : "${maxFreq#[0-9]}"
  maxFreq="${maxFreq%[0-9]}.$_"
  
  read curFreq <"$freqDir"/scaling_cur_freq
  curFreq="${curFreq::2}"; : "${curFreq#0-9}"
  curFreq="${curFreq%[0-9]}.$_"
}

graphic_processing_unit(){
  local line

  while read line; do
    [[ $line =~ 'VGA'|'3D' ]]&&{ graphicCard="${line##*: }"; break; }
  done < <(lspci)
}

motherboard(){
  local moboDir

  moboDir='/sys/devices/virtual/dmi/id'
  read -r moboVendor <"$moboDir"/board_vendor
  read -r moboName <"$moboDir"/board_name
}

primary_disk(){
  local line blockPath blockDevice

  while read line; do
    [[ $line =~ '0 1'$ ]]&&{ blockPath="${line%% *}"; break; }
  done </etc/fstab
  blockDevice="${blockPath#/dev/}"
  
  # read -r diskModel </sys/class/block/${blockDevice%[0-9]}/device/model

  read _ _ _ _ blockSize _ blocksTotal _ blocksAvailable _ _ < <(stat --file-system --terse /)
  ((partAvail=blockSize*blocksAvailable/1073741824))
  ((partTotal=blockSize*blocksTotal/1073741824))

  while read line; do
    [[ $line =~ sda$ ]]&&{ line="${line% *}" rawDiskTotal="${line##* }"; break; }
  done </proc/partitions
  ((diskTotal=rawDiskTotal/1048576))
}

check_memory(){
  local line rawMemory

  while read line; do
    case $line in
      MemTot*) rawMemory=("${line#*: }");;
      Active:*) rawMemory+=("${line#*:}"); break;;
    esac
  done </proc/meminfo

  ((memActive=${rawMemory[1]% kB}/1024))
  ((memTotal=${rawMemory[0]% kB}/1024))
  
  memUsage="$(awk 'BEGIN{printf "%.0f\n", (1683/7864)*100}')"
}

load_average(){ read -r line _ </proc/loadavg; loadAverage="${line#?.}"; }

kernel_release(){ read -r kernelName _ kernelRelease _ </proc/version; }

distribution(){
  local line

  while read line; do
    [[ $line =~ ^'PRETTY'|^'NAME' ]]&&{ 
      line="${line#*=}" distribution="${line//\"}"; break
    }
  done </etc/os-release
}

graphic_environment(){
  local line

  graphicEnvironment="${XDG_CURRENT_DESKTOP:-$DESKTOP_SESSION}"
  [[ ! $graphicEnvironment ]]&& hash wmctrl&&{
    while read line; do
      [[ $line =~ Name: ]]&&{ graphicEnvironment="${line#*: }"; break; }
    done < <(wmctrl)
  }
}

installed_packages(){
  unset packageCount
  : '/var/lib/pacman/local'; [[ -d $_ ]]&& for x in "$_"/*; do ((++packageCount)); done
}

check_swap(){
  local line curSwap maxSwap

  while read -a line; do
    (( ${i:=0} ))&&{
      ((curSwap+=${line[3]}/1024))
      ((maxSwap+=${line[2]}/1024))
    }|| ((++i))
  done </proc/swaps
}

stty -echo
main(){
  printf '\e[2J\e[H'
  [[ -f /proc/uptime ]]&& convert_uptime
  [[ -f /proc/cpuinfo ]]&& processor
  hash lspci&& graphic_processing_unit
  [[ -d /sys/devices/virtual/dmi/id ]]&& motherboard
  [[ -d /sys/class/block ]]&& primary_disk
  [[ -f /proc/meminfo ]]&& check_memory
  [[ -f /proc/loadavg ]]&& load_average
  [[ -f /proc/version ]]&& kernel_release
  [[ -f /etc/os-release ]]&& distribution
  graphic_environment
  installed_packages
  [[ -s /proc/swaps ]]&& check_swap

  # disables line rapping here 
  tput rmam
  # printf '%b' \
    log "[3${BF_COL3:-1}m${userName}${c7}@[3${BF_COL3:-1}m${hostName}" " "
    log " " " "
    log "[--------------- HARDWARE ----------------]" " "
    log "Uptime" "${daysUp}d ${hoursUp}h ${minsUp}m"
    log "Architecture" "${architecture:-Not found}"
    log "CPU" "${processor% Processor} ${maxFreq:-0}@${curFreq:-0}GHz"
    # "Uptime: ${daysUp}d ${hoursUp}h ${minsUp}m\n" \
    # "Architecture: ${architecture:-Not found}\n" \
    # "CPU: ${processor% Processor} \e[34m${maxFreq:-0}\e[m@\e[32m${curFreq:-0}\e[m GHz\n" \
    log "GPU" "${graphicCard/Advanced Micro Devices, Inc. }"
    # "GPU: ${graphicCard/Advanced Micro Devices, Inc. }\n" \
    log "Motherboard" "${moboVendor:-Not found} $moboName"
    # "Motherboard: ${moboVendor:-Not found} $moboName\n" \
    log "Primary Disk" "$diskModel ${partAvail:-0}/${partTotal:-0}/${diskTotal:-0} GiB" 
    # "Primary Disk: $diskModel \e[32m${partAvail:-0}\e[m" \
    # "/\e[34m${partTotal:-0}\e[m/\e[34m${diskTotal:-0}\e[m GiB\n" \
    # "RAM: \e[32m$memActive\e[m/\e[34m${memTotal:-Not found}\e[m GiB \e[32m$memUsage\e[m%\n" \
    log "RAM" "$memActive/${memTotal:-Not found}GiB $memUsage%" 
    # "Load Average: \e[32m${loadAverage:-0}\e[m%\n" \
    log "Load Average" "${loadAverage:-0}%" \
    # '\n~=~=~ Software ~=~=~\n' \
    log " " " "
    log "[--------------- SOFTWARE ----------------]" " "
    # "Kernel: ${kernelName:-Not found} $kernelRelease\n" \
    log "Kernel" "${kernelName:-Not found} $kernelRelease" 
    # "Distribution: ${distribution:-Not found}\n" \
    log "Distribution" "${distribution:-Not found}" 
    # "Graphic Environment: ${graphicEnvironment:-Not found}\n" \
    log "Graphic Environment" "${graphicEnvironment:-Not found}" 
    # "Installed Packages: \e[32m${packageCount}\e[m\n" \
    log "Installed Packages" "${packageCount}" 
    # "Installed Packages: \e[32m${packageCount}\e[m\n" \
    # "Swap Space: \e[32m${curSwap:-0}\e[m/\e[34m${maxSwap:-0}\e[m\n"
    log "Swap Space" "${curSwap:-0}/${maxSwap:-0}"
    log "[-----------------------------------------]" " "
  # enable line wrapping
  tput smam
}

if (( ${1:-0} > 0 )); then
  printf '\e[?1049h'
  for((;;)){
    trap 'printf "\e[?1049l"; stty echo; exit' 2
    main; sleep "$1"
  }
else
  main
fi

stty echo
